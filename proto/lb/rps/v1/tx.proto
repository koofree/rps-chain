syntax = "proto3";
package lb.rps.v1;

option go_package = "github.com/0xlb/rpschain/x/rps/types";

import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "lb/rps/v1/rps.proto";

// Msg defines the module Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  // MakeMove submit a move to the specified game
  rpc CreateGame(MsgCreateGame) returns (MsgCreateGameResponse);
  // MakeMove
  rpc MakeMove(MsgMakeMove) returns (MsgMakeMoveResponse);
  // RevealMove
  rpc RevealMove(MsgRevealMove) returns (MsgRevealMoveResponse);
  // UpdateParams
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgCreateGame defines the MsgCreateGame request type
message MsgCreateGame {
  option (cosmos.msg.v1.signer) = "creator";

  string creator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string opponent = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  uint64 rounds = 3;
}

// MsgCreateGameResponse
message MsgCreateGameResponse {}

// MsgCreateGame defines the MsgCreateGame request type
message MsgMakeMove {
  option (cosmos.msg.v1.signer) = "player";

  string player = 1;
  uint64 game_index = 2;
  string move = 3;
}

// MsgMakeMoveResponse
message MsgMakeMoveResponse {}

// MsgRevealMove
message MsgRevealMove {
  option (cosmos.msg.v1.signer) = "player";

  string player = 1;
  uint64 game_index = 2;
  string revealed_move = 3;
  string salt = 4;
}

// MsgRevealMoveResponse
message MsgRevealMoveResponse {}

// MsgUpdateParams
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  Params params = 2 [ (gogoproto.nullable) = false ];
}

// MsgUpdateParamsResponse
message MsgUpdateParamsResponse {}